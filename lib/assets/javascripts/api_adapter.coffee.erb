
pinso = pinso or {}
pinso.data = pinso.data or {}

pinso.data.adapter = ($, User) ->

  return {

    _logHistory : []

    initialize: (callback) ->
      @read(callback)
      $(window).one('unload', $.proxy(@exit, this))

    read: (callback) ->
      if @LMSMethods.INITIALIZE('') == 'true'
        user_status = new User({
          "student_name" : @getProperty(@LMSProperties.STUDENT_NAME),
          "student_id" : @getProperty(@LMSProperties.STUDENT_ID),
          "location" : @getProperty(@LMSProperties.LOCATION),
          "suspend_data" : @getProperty(@LMSProperties.SUSPEND_DATA).split(','),
          "score_raw" : @getProperty(@LMSProperties.SCORE_RAW),
          "credit" : @getProperty(@LMSProperties.CREDIT),
          "total_time" : @getProperty(@LMSProperties.TOTAL_TIME)
        })
        if (@getProperty(@LMSProperties.STATUS) == @LMSStrings.NOT_ATTEMPTED or @getProperty(@LMSProperties.STATUS) == @LMSStrings.UNKNOWN)
          user_status.set("status", @LMSStrings.INCOMPLETE)
        callback(user_status)


    write: (model) ->
      required_score = window.pinso.elearning.assessmentRequiredScore()
      score = model.get('score_raw') or @getProperty(@LMSProperties.SCORE_RAW)
      percent_complete = model.get('progress')
      suspend_data = model.get('suspend_data')
      total_questions = window.pinso.elearning.assessmentTotalQuestions()
      location = model.get('location')

      score.isPassing = score >= required_score
      content_completed = percent_complete == 1

      status = @LMSStrings.INCOMPLETE
      if content_completed
        if required_score?
          if (score? and score.isPassing)
            status = @LMSStrings.COMPLETED
        else
          status = @LMSStrings.COMPLETED

      @setProperty(@LMSProperties.SCORE_RAW, score)
      @setProperty(@LMSProperties.STATUS, status)
      @setProperty(@LMSProperties.SUSPEND_DATA, suspend_data.toString())
      @setProperty(@LMSProperties.LOCATION, location)


    setProperty: (prop, val) ->
      @LMSMethods.SET(prop, val)


    getProperty: (prop) ->
      value = null
      value = @LMSMethods.GET(prop)
      return value

    log: ->
    	@_logHistory.push(arguments)
    	if (window.console)
    		console.log( Array.prototype.slice.call(arguments) )

    terminate: ->
      @write()
      success = false
      if (@getProperty(@LMSProperties.STATUS) isnt @LMSStrings.COMPLETED and @getProperty(@LMSProperties.STATUS) isnt @LMSStrings.PASSED)
        success = @setProperty(@LMSProperties.EXIT, @LMSStrings.EXIT_SUSPEND)
      else
        success = @setProperty(@LMSProperties.EXIT, @LMSStrings.EXIT_LOGOUT)
      success = (@LMSMethods.TERMINATE('') == 'true')

      return success


    exit: ->
      success = @terminate()
      return success


    LMSProperties:
      STUDENT_NAME: "cmi.core.student_name"
      STUDENT_ID: "cmi.core.student_id"
      LOCATION: "cmi.core.lesson_location"
      STATUS: "cmi.core.lesson_status"
      SUCCESS: null
      SUSPEND_DATA: "cmi.suspend_data"
      SCORE_RAW: "cmi.core.score.raw"
      SCORE_MIN: "cmi.core.score.min"
      SCORE_MAX: "cmi.core.score.max"
      SCORE_SCALED: null
      CREDIT: "cmi.core.credit"
      TOTAL_TIME: "cmi.core.total_time"
      EXIT: "cmi.core.exit"
    LMSMethods:
      INITIALIZE: -> alert("LMSInitialize")
      SET: -> alert("LMSSetValue")
      GET: -> alert("LMSGetValue")
      COMMIT: -> alert("LMSCommit")
      TERMINATE: -> alert("LMSFinish")
      GET_LAST_ERROR: -> alert("LMSGetLastError")
    LMSStrings:
      COMPLETED: "completed"
      INCOMPLETE: "incomplete"
      PASSED: "passed"
      NOT_ATTEMPTED: "not attempted"
      UNKNOWN: "unknown"
      EXIT_SUSPEND: "suspend"
      EXIT_LOGOUT: "logout"

    cmi:
      suspend_data: ""
      core:
        student_name: ""
        student_id: ""
        lesson_location: ""
        lesson_status: ""
        credit: ""
        total_time: ""
        exit: ""
        score:
          raw: ""
          min: ""
          max: ""


  }
